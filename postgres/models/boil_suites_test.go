// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Blocks", testBlocks)
	t.Run("Exchanges", testExchanges)
	t.Run("ExchangeTicks", testExchangeTicks)
	t.Run("Githubs", testGithubs)
	t.Run("Heartbeats", testHeartbeats)
	t.Run("Mempools", testMempools)
	t.Run("MempoolBins", testMempoolBins)
	t.Run("NetworkSnapshots", testNetworkSnapshots)
	t.Run("Nodes", testNodes)
	t.Run("PowData", testPowData)
	t.Run("Reddits", testReddits)
	t.Run("Twitters", testTwitters)
	t.Run("Votes", testVotes)
	t.Run("VSPS", testVSPS)
	t.Run("VSPTicks", testVSPTicks)
	t.Run("Youtubes", testYoutubes)
}

func TestDelete(t *testing.T) {
	t.Run("Blocks", testBlocksDelete)
	t.Run("Exchanges", testExchangesDelete)
	t.Run("ExchangeTicks", testExchangeTicksDelete)
	t.Run("Githubs", testGithubsDelete)
	t.Run("Heartbeats", testHeartbeatsDelete)
	t.Run("Mempools", testMempoolsDelete)
	t.Run("MempoolBins", testMempoolBinsDelete)
	t.Run("NetworkSnapshots", testNetworkSnapshotsDelete)
	t.Run("Nodes", testNodesDelete)
	t.Run("PowData", testPowDataDelete)
	t.Run("Reddits", testRedditsDelete)
	t.Run("Twitters", testTwittersDelete)
	t.Run("Votes", testVotesDelete)
	t.Run("VSPS", testVSPSDelete)
	t.Run("VSPTicks", testVSPTicksDelete)
	t.Run("Youtubes", testYoutubesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Blocks", testBlocksQueryDeleteAll)
	t.Run("Exchanges", testExchangesQueryDeleteAll)
	t.Run("ExchangeTicks", testExchangeTicksQueryDeleteAll)
	t.Run("Githubs", testGithubsQueryDeleteAll)
	t.Run("Heartbeats", testHeartbeatsQueryDeleteAll)
	t.Run("Mempools", testMempoolsQueryDeleteAll)
	t.Run("MempoolBins", testMempoolBinsQueryDeleteAll)
	t.Run("NetworkSnapshots", testNetworkSnapshotsQueryDeleteAll)
	t.Run("Nodes", testNodesQueryDeleteAll)
	t.Run("PowData", testPowDataQueryDeleteAll)
	t.Run("Reddits", testRedditsQueryDeleteAll)
	t.Run("Twitters", testTwittersQueryDeleteAll)
	t.Run("Votes", testVotesQueryDeleteAll)
	t.Run("VSPS", testVSPSQueryDeleteAll)
	t.Run("VSPTicks", testVSPTicksQueryDeleteAll)
	t.Run("Youtubes", testYoutubesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Blocks", testBlocksSliceDeleteAll)
	t.Run("Exchanges", testExchangesSliceDeleteAll)
	t.Run("ExchangeTicks", testExchangeTicksSliceDeleteAll)
	t.Run("Githubs", testGithubsSliceDeleteAll)
	t.Run("Heartbeats", testHeartbeatsSliceDeleteAll)
	t.Run("Mempools", testMempoolsSliceDeleteAll)
	t.Run("MempoolBins", testMempoolBinsSliceDeleteAll)
	t.Run("NetworkSnapshots", testNetworkSnapshotsSliceDeleteAll)
	t.Run("Nodes", testNodesSliceDeleteAll)
	t.Run("PowData", testPowDataSliceDeleteAll)
	t.Run("Reddits", testRedditsSliceDeleteAll)
	t.Run("Twitters", testTwittersSliceDeleteAll)
	t.Run("Votes", testVotesSliceDeleteAll)
	t.Run("VSPS", testVSPSSliceDeleteAll)
	t.Run("VSPTicks", testVSPTicksSliceDeleteAll)
	t.Run("Youtubes", testYoutubesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Blocks", testBlocksExists)
	t.Run("Exchanges", testExchangesExists)
	t.Run("ExchangeTicks", testExchangeTicksExists)
	t.Run("Githubs", testGithubsExists)
	t.Run("Heartbeats", testHeartbeatsExists)
	t.Run("Mempools", testMempoolsExists)
	t.Run("MempoolBins", testMempoolBinsExists)
	t.Run("NetworkSnapshots", testNetworkSnapshotsExists)
	t.Run("Nodes", testNodesExists)
	t.Run("PowData", testPowDataExists)
	t.Run("Reddits", testRedditsExists)
	t.Run("Twitters", testTwittersExists)
	t.Run("Votes", testVotesExists)
	t.Run("VSPS", testVSPSExists)
	t.Run("VSPTicks", testVSPTicksExists)
	t.Run("Youtubes", testYoutubesExists)
}

func TestFind(t *testing.T) {
	t.Run("Blocks", testBlocksFind)
	t.Run("Exchanges", testExchangesFind)
	t.Run("ExchangeTicks", testExchangeTicksFind)
	t.Run("Githubs", testGithubsFind)
	t.Run("Heartbeats", testHeartbeatsFind)
	t.Run("Mempools", testMempoolsFind)
	t.Run("MempoolBins", testMempoolBinsFind)
	t.Run("NetworkSnapshots", testNetworkSnapshotsFind)
	t.Run("Nodes", testNodesFind)
	t.Run("PowData", testPowDataFind)
	t.Run("Reddits", testRedditsFind)
	t.Run("Twitters", testTwittersFind)
	t.Run("Votes", testVotesFind)
	t.Run("VSPS", testVSPSFind)
	t.Run("VSPTicks", testVSPTicksFind)
	t.Run("Youtubes", testYoutubesFind)
}

func TestBind(t *testing.T) {
	t.Run("Blocks", testBlocksBind)
	t.Run("Exchanges", testExchangesBind)
	t.Run("ExchangeTicks", testExchangeTicksBind)
	t.Run("Githubs", testGithubsBind)
	t.Run("Heartbeats", testHeartbeatsBind)
	t.Run("Mempools", testMempoolsBind)
	t.Run("MempoolBins", testMempoolBinsBind)
	t.Run("NetworkSnapshots", testNetworkSnapshotsBind)
	t.Run("Nodes", testNodesBind)
	t.Run("PowData", testPowDataBind)
	t.Run("Reddits", testRedditsBind)
	t.Run("Twitters", testTwittersBind)
	t.Run("Votes", testVotesBind)
	t.Run("VSPS", testVSPSBind)
	t.Run("VSPTicks", testVSPTicksBind)
	t.Run("Youtubes", testYoutubesBind)
}

func TestOne(t *testing.T) {
	t.Run("Blocks", testBlocksOne)
	t.Run("Exchanges", testExchangesOne)
	t.Run("ExchangeTicks", testExchangeTicksOne)
	t.Run("Githubs", testGithubsOne)
	t.Run("Heartbeats", testHeartbeatsOne)
	t.Run("Mempools", testMempoolsOne)
	t.Run("MempoolBins", testMempoolBinsOne)
	t.Run("NetworkSnapshots", testNetworkSnapshotsOne)
	t.Run("Nodes", testNodesOne)
	t.Run("PowData", testPowDataOne)
	t.Run("Reddits", testRedditsOne)
	t.Run("Twitters", testTwittersOne)
	t.Run("Votes", testVotesOne)
	t.Run("VSPS", testVSPSOne)
	t.Run("VSPTicks", testVSPTicksOne)
	t.Run("Youtubes", testYoutubesOne)
}

func TestAll(t *testing.T) {
	t.Run("Blocks", testBlocksAll)
	t.Run("Exchanges", testExchangesAll)
	t.Run("ExchangeTicks", testExchangeTicksAll)
	t.Run("Githubs", testGithubsAll)
	t.Run("Heartbeats", testHeartbeatsAll)
	t.Run("Mempools", testMempoolsAll)
	t.Run("MempoolBins", testMempoolBinsAll)
	t.Run("NetworkSnapshots", testNetworkSnapshotsAll)
	t.Run("Nodes", testNodesAll)
	t.Run("PowData", testPowDataAll)
	t.Run("Reddits", testRedditsAll)
	t.Run("Twitters", testTwittersAll)
	t.Run("Votes", testVotesAll)
	t.Run("VSPS", testVSPSAll)
	t.Run("VSPTicks", testVSPTicksAll)
	t.Run("Youtubes", testYoutubesAll)
}

func TestCount(t *testing.T) {
	t.Run("Blocks", testBlocksCount)
	t.Run("Exchanges", testExchangesCount)
	t.Run("ExchangeTicks", testExchangeTicksCount)
	t.Run("Githubs", testGithubsCount)
	t.Run("Heartbeats", testHeartbeatsCount)
	t.Run("Mempools", testMempoolsCount)
	t.Run("MempoolBins", testMempoolBinsCount)
	t.Run("NetworkSnapshots", testNetworkSnapshotsCount)
	t.Run("Nodes", testNodesCount)
	t.Run("PowData", testPowDataCount)
	t.Run("Reddits", testRedditsCount)
	t.Run("Twitters", testTwittersCount)
	t.Run("Votes", testVotesCount)
	t.Run("VSPS", testVSPSCount)
	t.Run("VSPTicks", testVSPTicksCount)
	t.Run("Youtubes", testYoutubesCount)
}

func TestInsert(t *testing.T) {
	t.Run("Blocks", testBlocksInsert)
	t.Run("Blocks", testBlocksInsertWhitelist)
	t.Run("Exchanges", testExchangesInsert)
	t.Run("Exchanges", testExchangesInsertWhitelist)
	t.Run("ExchangeTicks", testExchangeTicksInsert)
	t.Run("ExchangeTicks", testExchangeTicksInsertWhitelist)
	t.Run("Githubs", testGithubsInsert)
	t.Run("Githubs", testGithubsInsertWhitelist)
	t.Run("Heartbeats", testHeartbeatsInsert)
	t.Run("Heartbeats", testHeartbeatsInsertWhitelist)
	t.Run("Mempools", testMempoolsInsert)
	t.Run("Mempools", testMempoolsInsertWhitelist)
	t.Run("MempoolBins", testMempoolBinsInsert)
	t.Run("MempoolBins", testMempoolBinsInsertWhitelist)
	t.Run("NetworkSnapshots", testNetworkSnapshotsInsert)
	t.Run("NetworkSnapshots", testNetworkSnapshotsInsertWhitelist)
	t.Run("Nodes", testNodesInsert)
	t.Run("Nodes", testNodesInsertWhitelist)
	t.Run("PowData", testPowDataInsert)
	t.Run("PowData", testPowDataInsertWhitelist)
	t.Run("Reddits", testRedditsInsert)
	t.Run("Reddits", testRedditsInsertWhitelist)
	t.Run("Twitters", testTwittersInsert)
	t.Run("Twitters", testTwittersInsertWhitelist)
	t.Run("Votes", testVotesInsert)
	t.Run("Votes", testVotesInsertWhitelist)
	t.Run("VSPS", testVSPSInsert)
	t.Run("VSPS", testVSPSInsertWhitelist)
	t.Run("VSPTicks", testVSPTicksInsert)
	t.Run("VSPTicks", testVSPTicksInsertWhitelist)
	t.Run("Youtubes", testYoutubesInsert)
	t.Run("Youtubes", testYoutubesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ExchangeTickToExchangeUsingExchange", testExchangeTickToOneExchangeUsingExchange)
	t.Run("HeartbeatToNodeUsingNode", testHeartbeatToOneNodeUsingNode)
	t.Run("VSPTickToVSPUsingVSP", testVSPTickToOneVSPUsingVSP)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ExchangeToExchangeTicks", testExchangeToManyExchangeTicks)
	t.Run("NodeToHeartbeats", testNodeToManyHeartbeats)
	t.Run("VSPToVSPTicks", testVSPToManyVSPTicks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ExchangeTickToExchangeUsingExchangeTicks", testExchangeTickToOneSetOpExchangeUsingExchange)
	t.Run("HeartbeatToNodeUsingHeartbeats", testHeartbeatToOneSetOpNodeUsingNode)
	t.Run("VSPTickToVSPUsingVSPTicks", testVSPTickToOneSetOpVSPUsingVSP)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ExchangeToExchangeTicks", testExchangeToManyAddOpExchangeTicks)
	t.Run("NodeToHeartbeats", testNodeToManyAddOpHeartbeats)
	t.Run("VSPToVSPTicks", testVSPToManyAddOpVSPTicks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Blocks", testBlocksReload)
	t.Run("Exchanges", testExchangesReload)
	t.Run("ExchangeTicks", testExchangeTicksReload)
	t.Run("Githubs", testGithubsReload)
	t.Run("Heartbeats", testHeartbeatsReload)
	t.Run("Mempools", testMempoolsReload)
	t.Run("MempoolBins", testMempoolBinsReload)
	t.Run("NetworkSnapshots", testNetworkSnapshotsReload)
	t.Run("Nodes", testNodesReload)
	t.Run("PowData", testPowDataReload)
	t.Run("Reddits", testRedditsReload)
	t.Run("Twitters", testTwittersReload)
	t.Run("Votes", testVotesReload)
	t.Run("VSPS", testVSPSReload)
	t.Run("VSPTicks", testVSPTicksReload)
	t.Run("Youtubes", testYoutubesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Blocks", testBlocksReloadAll)
	t.Run("Exchanges", testExchangesReloadAll)
	t.Run("ExchangeTicks", testExchangeTicksReloadAll)
	t.Run("Githubs", testGithubsReloadAll)
	t.Run("Heartbeats", testHeartbeatsReloadAll)
	t.Run("Mempools", testMempoolsReloadAll)
	t.Run("MempoolBins", testMempoolBinsReloadAll)
	t.Run("NetworkSnapshots", testNetworkSnapshotsReloadAll)
	t.Run("Nodes", testNodesReloadAll)
	t.Run("PowData", testPowDataReloadAll)
	t.Run("Reddits", testRedditsReloadAll)
	t.Run("Twitters", testTwittersReloadAll)
	t.Run("Votes", testVotesReloadAll)
	t.Run("VSPS", testVSPSReloadAll)
	t.Run("VSPTicks", testVSPTicksReloadAll)
	t.Run("Youtubes", testYoutubesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Blocks", testBlocksSelect)
	t.Run("Exchanges", testExchangesSelect)
	t.Run("ExchangeTicks", testExchangeTicksSelect)
	t.Run("Githubs", testGithubsSelect)
	t.Run("Heartbeats", testHeartbeatsSelect)
	t.Run("Mempools", testMempoolsSelect)
	t.Run("MempoolBins", testMempoolBinsSelect)
	t.Run("NetworkSnapshots", testNetworkSnapshotsSelect)
	t.Run("Nodes", testNodesSelect)
	t.Run("PowData", testPowDataSelect)
	t.Run("Reddits", testRedditsSelect)
	t.Run("Twitters", testTwittersSelect)
	t.Run("Votes", testVotesSelect)
	t.Run("VSPS", testVSPSSelect)
	t.Run("VSPTicks", testVSPTicksSelect)
	t.Run("Youtubes", testYoutubesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Blocks", testBlocksUpdate)
	t.Run("Exchanges", testExchangesUpdate)
	t.Run("ExchangeTicks", testExchangeTicksUpdate)
	t.Run("Githubs", testGithubsUpdate)
	t.Run("Heartbeats", testHeartbeatsUpdate)
	t.Run("Mempools", testMempoolsUpdate)
	t.Run("MempoolBins", testMempoolBinsUpdate)
	t.Run("NetworkSnapshots", testNetworkSnapshotsUpdate)
	t.Run("Nodes", testNodesUpdate)
	t.Run("PowData", testPowDataUpdate)
	t.Run("Reddits", testRedditsUpdate)
	t.Run("Twitters", testTwittersUpdate)
	t.Run("Votes", testVotesUpdate)
	t.Run("VSPS", testVSPSUpdate)
	t.Run("VSPTicks", testVSPTicksUpdate)
	t.Run("Youtubes", testYoutubesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Blocks", testBlocksSliceUpdateAll)
	t.Run("Exchanges", testExchangesSliceUpdateAll)
	t.Run("ExchangeTicks", testExchangeTicksSliceUpdateAll)
	t.Run("Githubs", testGithubsSliceUpdateAll)
	t.Run("Heartbeats", testHeartbeatsSliceUpdateAll)
	t.Run("Mempools", testMempoolsSliceUpdateAll)
	t.Run("MempoolBins", testMempoolBinsSliceUpdateAll)
	t.Run("NetworkSnapshots", testNetworkSnapshotsSliceUpdateAll)
	t.Run("Nodes", testNodesSliceUpdateAll)
	t.Run("PowData", testPowDataSliceUpdateAll)
	t.Run("Reddits", testRedditsSliceUpdateAll)
	t.Run("Twitters", testTwittersSliceUpdateAll)
	t.Run("Votes", testVotesSliceUpdateAll)
	t.Run("VSPS", testVSPSSliceUpdateAll)
	t.Run("VSPTicks", testVSPTicksSliceUpdateAll)
	t.Run("Youtubes", testYoutubesSliceUpdateAll)
}
