// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CommunityStat is an object representing the database table.
type CommunityStat struct {
	Date     int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Platform string `boil:"platform" json:"platform" toml:"platform" yaml:"platform"`
	Account  string `boil:"account" json:"account" toml:"account" yaml:"account"`
	Metric   string `boil:"metric" json:"metric" toml:"metric" yaml:"metric"`
	Value    int64  `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *communityStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L communityStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommunityStatColumns = struct {
	Date     string
	Platform string
	Account  string
	Metric   string
	Value    string
}{
	Date:     "date",
	Platform: "platform",
	Account:  "account",
	Metric:   "metric",
	Value:    "value",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var CommunityStatWhere = struct {
	Date     whereHelperint64
	Platform whereHelperstring
	Account  whereHelperstring
	Metric   whereHelperstring
	Value    whereHelperint64
}{
	Date:     whereHelperint64{field: "\"community_stat\".\"date\""},
	Platform: whereHelperstring{field: "\"community_stat\".\"platform\""},
	Account:  whereHelperstring{field: "\"community_stat\".\"account\""},
	Metric:   whereHelperstring{field: "\"community_stat\".\"metric\""},
	Value:    whereHelperint64{field: "\"community_stat\".\"value\""},
}

// CommunityStatRels is where relationship names are stored.
var CommunityStatRels = struct {
}{}

// communityStatR is where relationships are stored.
type communityStatR struct {
}

// NewStruct creates a new relationship struct
func (*communityStatR) NewStruct() *communityStatR {
	return &communityStatR{}
}

// communityStatL is where Load methods for each relationship are stored.
type communityStatL struct{}

var (
	communityStatAllColumns            = []string{"date", "platform", "account", "metric", "value"}
	communityStatColumnsWithoutDefault = []string{"date", "platform", "account", "metric", "value"}
	communityStatColumnsWithDefault    = []string{}
	communityStatPrimaryKeyColumns     = []string{"date", "platform", "account", "metric"}
)

type (
	// CommunityStatSlice is an alias for a slice of pointers to CommunityStat.
	// This should generally be used opposed to []CommunityStat.
	CommunityStatSlice []*CommunityStat

	communityStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	communityStatType                 = reflect.TypeOf(&CommunityStat{})
	communityStatMapping              = queries.MakeStructMapping(communityStatType)
	communityStatPrimaryKeyMapping, _ = queries.BindMapping(communityStatType, communityStatMapping, communityStatPrimaryKeyColumns)
	communityStatInsertCacheMut       sync.RWMutex
	communityStatInsertCache          = make(map[string]insertCache)
	communityStatUpdateCacheMut       sync.RWMutex
	communityStatUpdateCache          = make(map[string]updateCache)
	communityStatUpsertCacheMut       sync.RWMutex
	communityStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single communityStat record from the query.
func (q communityStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommunityStat, error) {
	o := &CommunityStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for community_stat")
	}

	return o, nil
}

// All returns all CommunityStat records from the query.
func (q communityStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommunityStatSlice, error) {
	var o []*CommunityStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommunityStat slice")
	}

	return o, nil
}

// Count returns the count of all CommunityStat records in the query.
func (q communityStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count community_stat rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q communityStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if community_stat exists")
	}

	return count > 0, nil
}

// CommunityStats retrieves all the records using an executor.
func CommunityStats(mods ...qm.QueryMod) communityStatQuery {
	mods = append(mods, qm.From("\"community_stat\""))
	return communityStatQuery{NewQuery(mods...)}
}

// FindCommunityStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommunityStat(ctx context.Context, exec boil.ContextExecutor, date int64, platform string, account string, metric string, selectCols ...string) (*CommunityStat, error) {
	communityStatObj := &CommunityStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"community_stat\" where \"date\"=$1 AND \"platform\"=$2 AND \"account\"=$3 AND \"metric\"=$4", sel,
	)

	q := queries.Raw(query, date, platform, account, metric)

	err := q.Bind(ctx, exec, communityStatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from community_stat")
	}

	return communityStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommunityStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no community_stat provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(communityStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	communityStatInsertCacheMut.RLock()
	cache, cached := communityStatInsertCache[key]
	communityStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			communityStatAllColumns,
			communityStatColumnsWithDefault,
			communityStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(communityStatType, communityStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(communityStatType, communityStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"community_stat\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"community_stat\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into community_stat")
	}

	if !cached {
		communityStatInsertCacheMut.Lock()
		communityStatInsertCache[key] = cache
		communityStatInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CommunityStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommunityStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	communityStatUpdateCacheMut.RLock()
	cache, cached := communityStatUpdateCache[key]
	communityStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			communityStatAllColumns,
			communityStatPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update community_stat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"community_stat\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, communityStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(communityStatType, communityStatMapping, append(wl, communityStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update community_stat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for community_stat")
	}

	if !cached {
		communityStatUpdateCacheMut.Lock()
		communityStatUpdateCache[key] = cache
		communityStatUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q communityStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for community_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for community_stat")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommunityStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"community_stat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, communityStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in communityStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all communityStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommunityStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no community_stat provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(communityStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	communityStatUpsertCacheMut.RLock()
	cache, cached := communityStatUpsertCache[key]
	communityStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			communityStatAllColumns,
			communityStatColumnsWithDefault,
			communityStatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			communityStatAllColumns,
			communityStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert community_stat, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(communityStatPrimaryKeyColumns))
			copy(conflict, communityStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"community_stat\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(communityStatType, communityStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(communityStatType, communityStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert community_stat")
	}

	if !cached {
		communityStatUpsertCacheMut.Lock()
		communityStatUpsertCache[key] = cache
		communityStatUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CommunityStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommunityStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommunityStat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), communityStatPrimaryKeyMapping)
	sql := "DELETE FROM \"community_stat\" WHERE \"date\"=$1 AND \"platform\"=$2 AND \"account\"=$3 AND \"metric\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from community_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for community_stat")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q communityStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no communityStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from community_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for community_stat")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommunityStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"community_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, communityStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from communityStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for community_stat")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommunityStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommunityStat(ctx, exec, o.Date, o.Platform, o.Account, o.Metric)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommunityStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommunityStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"community_stat\".* FROM \"community_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, communityStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommunityStatSlice")
	}

	*o = slice

	return nil
}

// CommunityStatExists checks if the CommunityStat row exists.
func CommunityStatExists(ctx context.Context, exec boil.ContextExecutor, date int64, platform string, account string, metric string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"community_stat\" where \"date\"=$1 AND \"platform\"=$2 AND \"account\"=$3 AND \"metric\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date, platform, account, metric)
	}
	row := exec.QueryRowContext(ctx, sql, date, platform, account, metric)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if community_stat exists")
	}

	return exists, nil
}
